---
- name: Setup Linux Networking Problems for Assessment
  hosts: candidate_vm # Target your test VM
  become: yes
  gather_facts: yes # Needed to discover primary interface, services, etc.

  vars:
    primary_interface_to_use: "{{ primary_interface | default(ansible_default_ipv4.interface) }}"
    test_dns_server_bad: "10.254.254.254" # A non-existent DNS server
    original_gateway: "{{ ansible_default_ipv4.gateway if ansible_default_ipv4 is defined else '' }}" # To potentially restore later if needed for other tasks
    local_lan_gateway_for_task4: "192.168.1.254" # Assumed gateway for the 10.50.0.0/16 network task
    conflict_port_for_task5: 9000
    ssh_port: 22 # Assuming standard SSH port
    static_ip_for_task7: "192.168.1.100/24" # IP/CIDR

  pre_tasks:
    - name: Ensure essential tools are present (for problem setup and candidate use)
      ansible.builtin.package:
        name:
          - iproute2
          - dnsutils # for dig, nslookup
          - netcat-openbsd # or netcat-traditional, nc
          - ufw # or firewalld
          # - firewalld # if using firewalld
          - openssh-server
        state: present
      ignore_errors: yes # Some might already be there

    - name: Discover primary interface if not overridden
      ansible.builtin.set_fact:
        primary_interface_to_use: "{{ ansible_default_ipv4.interface }}"
      when: primary_interface is not defined and ansible_default_ipv4.interface is defined

    - name: Fail if primary interface cannot be determined
      ansible.builtin.fail:
        msg: "Primary network interface could not be determined. Please set 'primary_interface' var."
      when: primary_interface_to_use is not defined or primary_interface_to_use == ""

    - name: Ensure SSH is allowed through firewall (so Ansible doesn't get locked out)
      ansible.builtin.ufw:
        rule: allow
        port: "{{ ssh_port }}"
        proto: tcp
      when: "'ufw.service' in ansible_facts.services or 'ufw' in ansible_facts.services"
      ignore_errors: yes # In case ufw is not fully set up yet

    - name: Ensure firewalld is started and SSH is allowed (so Ansible doesn't get locked out)
      block:
        - ansible.builtin.service:
            name: firewalld
            state: started
            enabled: yes
        - ansible.posix.firewalld:
            service: ssh
            permanent: yes
            state: enabled
        - ansible.posix.firewalld: # Reload to apply permanent
            state: reloaded
      when: "'firewalld.service' in ansible_facts.services"
      ignore_errors: yes


  tasks:
    # --- Task 1: Break DNS Resolution ---
    - name: "TASK 1 Setup: Overwrite /etc/resolv.conf with a bad DNS server"
      ansible.builtin.copy:
        content: |
          # This file is intentionally misconfigured for a test
          nameserver {{ test_dns_server_bad }}
          # search localdomain
        dest: /etc/resolv.conf
        owner: root
        group: root
        mode: '0644'
        backup: yes # Creates a backup of the original
      # Note: If systemd-resolved or NetworkManager is active, this change might be temporary or overwritten.
      # A more robust way to break DNS would be to configure systemd-resolved/NM with bad DNS.
      # For now, this direct overwrite is a common way to see the problem.
      tags: setup_task1

    # --- Task 3: Setup service and firewall to block it ---
    - name: "TASK 3 Setup: Start a simple service on TCP 8080 (if not already running)"
      ansible.builtin.shell:
        cmd: "nohup nc -lp 8080 -e /bin/echo > /dev/null 2>&1 &"
        # Or: nohup python3 -m http.server 8080 > /dev/null 2>&1 &
      args:
        executable: /bin/bash
      async: 45 # Let it run in background
      poll: 0
      register: service_8080_started
      changed_when: false # Assume it's a setup step
      failed_when: false # Don't stop playbook if nc isn't ideal
      tags: setup_task3

    - name: "TASK 3 Setup: Ensure firewall (UFW) is active and blocks port 8080 by default"
      block:
        - ansible.builtin.ufw: # Reset to defaults which often deny incoming
            state: enabled
            policy: deny
            direction: incoming
        - ansible.builtin.ufw: # Explicitly delete any existing allow for 8080
            rule: allow # To delete an allow rule, you specify it as if adding
            port: '8080'
            proto: tcp
            delete: yes
      when: "'ufw.service' in ansible_facts.services or 'ufw' in ansible_facts.services"
      tags: setup_task3

    - name: "TASK 3 Setup: Ensure firewall (firewalld) is active and remove port 8080 if allowed"
      block:
        - ansible.builtin.service:
            name: firewalld
            state: started
            enabled: yes
        - ansible.posix.firewalld:
            port: 8080/tcp
            permanent: yes
            state: disabled # This removes the port if it was enabled
        - ansible.posix.firewalld:
            immediate: yes # Apply to running config if not permanent
            port: 8080/tcp
            state: disabled
        - ansible.posix.firewalld: # Reload to ensure permanent takes effect
            state: reloaded
      when: "'firewalld.service' in ansible_facts.services"
      tags: setup_task3

    # --- Task 4: (No setup needed, candidate adds a route) ---
    # Ensure local_lan_gateway_for_task4 (192.168.1.254) is plausible for the VM's network.

    # --- Task 5: Create conflicting process for 'Address already in use' ---
    - name: "TASK 5 Setup: Start a process on TCP {{ conflict_port_for_task5 }}"
      ansible.builtin.shell:
        cmd: "nohup nc -lp {{ conflict_port_for_task5 }} > /dev/null 2>&1 &"
      args:
        executable: /bin/bash
      async: 45
      poll: 0
      register: conflict_process_started
      changed_when: false
      failed_when: false
      tags: setup_task5

    # --- Task 6: Break SSH ---
    - name: "TASK 6 Setup: Stop sshd service"
      ansible.builtin.service:
        name: "{{ 'sshd' if ansible_os_family == 'RedHat' or ansible_os_family == 'Suse' else 'ssh' }}"
        state: stopped
      # Alternative: Modify sshd_config to ListenAddress 127.0.0.1 and restart
      # ansible.builtin.lineinfile:
      #   path: /etc/ssh/sshd_config
      #   regexp: '^#?ListenAddress'
      #   line: 'ListenAddress 127.0.0.1'
      #   backup: yes
      # notify: restart_sshd # Handler would restart sshd
      tags: setup_task6

   
   
    - name: Final readiness message
      ansible.builtin.debug:
        msg: "Networking problems have been set up on {{ inventory_hostname }} using interface {{ primary_interface_to_use }}. The original gateway was {{ original_gateway_found | default('not found or not applicable') }}. Candidate can now proceed."
